/*
 * This file is generated by jOOQ.
 */
package notary.db.tables;


import javax.annotation.Generated;

import notary.db.Notary;
import notary.db.tables.records.TokensRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Tokens extends TableImpl<TokensRecord> {

    private static final long serialVersionUID = 930607547;

    /**
     * The reference instance of <code>notary.tokens</code>
     */
    public static final Tokens TOKENS = new Tokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokensRecord> getRecordType() {
        return TokensRecord.class;
    }

    /**
     * The column <code>notary.tokens.wallet</code>.
     */
    public final TableField<TokensRecord, String> WALLET = createField("wallet", org.jooq.impl.SQLDataType.VARCHAR(42).nullable(false), this, "");

    /**
     * The column <code>notary.tokens.token</code>.
     */
    public final TableField<TokensRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * Create a <code>notary.tokens</code> table reference
     */
    public Tokens() {
        this(DSL.name("tokens"), null);
    }

    /**
     * Create an aliased <code>notary.tokens</code> table reference
     */
    public Tokens(String alias) {
        this(DSL.name(alias), TOKENS);
    }

    /**
     * Create an aliased <code>notary.tokens</code> table reference
     */
    public Tokens(Name alias) {
        this(alias, TOKENS);
    }

    private Tokens(Name alias, Table<TokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tokens(Name alias, Table<TokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Notary.NOTARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tokens as(String alias) {
        return new Tokens(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tokens as(Name alias) {
        return new Tokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(String name) {
        return new Tokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(Name name) {
        return new Tokens(name, null);
    }
}
